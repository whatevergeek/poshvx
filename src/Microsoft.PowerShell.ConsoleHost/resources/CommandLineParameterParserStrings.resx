<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandAlreadySpecified" xml:space="preserve">
    <value>Cannot process command because a command is already specified with -Command or -EncodedCommand.</value>
  </data>
  <data name="CannotReadFile" xml:space="preserve">
    <value>Unable to read from file '{0}'.</value>
  </data>
  <data name="MissingCommandParameter" xml:space="preserve">
    <value>Cannot process the command because of a missing parameter. A command must follow -Command.</value>
  </data>
  <data name="UnknownParameter" xml:space="preserve">
    <value>Unrecognized parameter: '{0}'.</value>
  </data>
  <data name="DefaultHelp" xml:space="preserve">
    <value>PowerShell[.exe] [-PSConsoleFile &lt;file&gt; | -Version &lt;version&gt;]
    [-NoLogo] [-NoExit] [-NoProfile] [-NonInteractive] [-STA]
    [-OutputFormat {Text | XML}] [-InputFormat {Text | XML}]
    [-ConfigurationName &lt;string&gt;]
    [-File fileName [arguments...]] [-ExecutionPolicy &lt;ExecutionPolicy&gt;]
    [-Command { - | &lt;script-block&gt; [-args &lt;arg-array&gt;]
                  | &lt;string&gt; [&lt;CommandParameters&gt;] } ]

PowerShell[.exe] -Help | -? | /?

-PSConsoleFile
    Loads the specified Windows PowerShell console file. To create a console
    file, use Export-Console in Windows PowerShell.

-Version
    Starts the specified version of Windows PowerShell.

-NoLogo
    Hides the copyright banner at startup.

-NoExit
    Does not exit after running startup commands.

-NoProfile
    Does not use the user profile.

-NonInteractive
    Does not present an interactive prompt to the user.

-STA
    Uses a single-threaded apartment for the execution thread.

-OutputFormat
    Determines how output from Windows PowerShell is formatted. Valid values
    are "Text" (text strings) or "XML" (serialized CLIXML format).

-InputFormat
    Describes the format of data sent to Windows PowerShell. Valid values are
    "Text" (text strings) or "XML" (serialized CLIXML format).

-ConfigurationName
    Specifies a configuration endpoint in which Windows PowerShell is run.
    This can be any endpoint registered on the local machine including the
    default Windows PowerShell remoting endpoints or a custom endpoint having
    specific user role capabilities.

-Command
    Executes the specified commands (and any parameters) as though they were
    typed at the Windows PowerShell command prompt, and then exits, unless 
    NoExit is specified. The value of Command can be "-", a string. or a
    script block.

    If the value of Command is "-", the command text is read from standard
    input.
	
    Script blocks must be enclosed in braces ({}). You can specify a script
    block only when running PowerShell.exe in Windows PowerShell. The results
    of the script are returned to the parent shell as deserialized XML objects,
    not live objects.

    If the value of Command is a string, Command must be the last parameter
    in the command , because any characters typed after the command are 
    interpreted as the command arguments.
       To write a string that runs a Windows PowerShell command, use the format:
	"&amp; {&lt;command&gt;}"
    where the quotation marks indicate a string and the invoke operator (&amp;)
    causes the command to be run.

-Help, -?, /?
    Shows this message. If you are typing a PowerShell.exe command in Windows
    PowerShell, prepend the command parameters with a hyphen (-), not a forward
    slash (/). You can use either a hyphen or forward slash in Cmd.exe.


EXAMPLES
    PowerShell -PSConsoleFile SqlSnapin.Psc1
    PowerShell -version 1.0 -NoLogo -InputFormat text -OutputFormat XML
    PowerShell -ConfigurationName AdminRoles
    PowerShell -Command {Get-EventLog -LogName security}
    PowerShell -Command "&amp; {Get-EventLog -LogName security}"
</value>
  </data>
  <data name="TooManyParametersToCommand" xml:space="preserve">
    <value>'-' was specified with the -Command parameter; no other arguments to -Command are permitted.</value>
  </data>
  <data name="StdinNotRedirected" xml:space="preserve">
    <value>'-' was specified as the argument to -Command but standard input has not been redirected for this process.</value>
  </data>
  <data name="MissingOutputFormatParameter" xml:space="preserve">
    <value>The command cannot be run because no argument has been supplied for the OutputFormat parameter. Specify one of the following formats for this parameter.
{0}</value>
  </data>
  <data name="MissingInputFormatParameter" xml:space="preserve">
    <value>Cannot process the command because the -InputFormat parameter requires an argument. Specify a valid format argument for this parameter.  Valid formats are:
{0}</value>
  </data>
  <data name="BadFormatParameterValue" xml:space="preserve">
    <value>Cannot process the command because of an incorrect parameter value. "{0}" is not a valid format.  Valid formats are:
{1}</value>
  </data>
  <data name="ArgsAlreadySpecified" xml:space="preserve">
    <value>Cannot process the command because arguments to -Command or -EncodedCommand have already been specified with -EncodedArguments.</value>
  </data>
  <data name="MissingArgsValue" xml:space="preserve">
    <value>Cannot process the command because -EncodedArguments requires a value. Specify a value for the -EncodedArguments parameter.</value>
  </data>
  <data name="MissingFileArgument" xml:space="preserve">
    <value>The command cannot be run because the File parameter requires a file path. Supply a path for the File parameter and then try the command again.</value>
  </data>
  <data name="MissingWindowStyleArgument" xml:space="preserve">
    <value>Cannot process the command because -WindowStyle requires an argument that is normal, hidden, minimized or maximized. Specify one of these argument values and try again.</value>
  </data>
  <data name="InvalidFileArgument" xml:space="preserve">
    <value>Processing -File '{0}' failed: {1} Specify a valid path for the -File parameter.</value>
  </data>
  <data name="InvalidWindowStyleArgument" xml:space="preserve">
    <value>Processing -WindowStyle '{0}' failed: {1}.</value>
  </data>
  <data name="InvalidFileArgumentExtension" xml:space="preserve">
    <value>Processing -File '{0}' failed because the file does not have a '.ps1' extension. Specify a valid Windows PowerShell script file name, and then try again.</value>
  </data>
  <data name="ArgumentFileDoesNotExist" xml:space="preserve">
    <value>The argument '{0}' to the -File parameter does not exist. Provide the path to an existing '.ps1' file as an argument to the -File parameter.</value>
  </data>
  <data name="BadArgsValue" xml:space="preserve">
    <value>Cannot process the command because the value specified with -EncodedArguments is not properly encoded. The value must be Base64 encoded.</value>
  </data>
  <data name="BadCommandValue" xml:space="preserve">
    <value>Cannot process the command because the value specified with -EncodedCommand is not properly encoded. The value must be Base64 encoded.</value>
  </data>
  <data name="MissingExecutionPolicyParameter" xml:space="preserve">
    <value>Cannot process the execution policy because of a missing policy name. A policy name must follow -ExecutionPolicy.</value>
  </data>
  <data name="MtaStaMutuallyExclusive" xml:space="preserve">
    <value>Cannot process the command because -STA and -MTA are both specified. Specify either -STA or -MTA.</value>
  </data>
  <data name="MissingConfigurationNameArgument" xml:space="preserve">
    <value>Cannot process the command because -Configuration requires an argument that is a remote endpoint configuration name. Specify this argument and try again.</value>
  </data>
</root>