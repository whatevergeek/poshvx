<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityNameConflict" xml:space="preserve">
    <value>Cannot generate activity. The name '{0}' is reserved.</value>
  </data>
  <data name="ActivityNameNotFound" xml:space="preserve">
    <value>Cannot generate activity. The command name '{0}' could not be found in the default runspace. Use the GenerateFromCommandInfo method to generate activities for non-default commands.</value>
    <comment>GenerateFromCommandInfo should not be localized. It is the name of a method.</comment>
  </data>
  <data name="ActivityParameterGroup" xml:space="preserve">
    <value>Activity-Specific Parameters</value>
  </data>
  <data name="CannotSpecifyBothCommandAndCommandName" xml:space="preserve">
    <value>'Command' is mutually exclusive with 'CommandName'. Either specify  'CommandName' (optionally with 'Parameters'),  or 'Command'.</value>
    <comment>Command, CommandName and Parameters should not be localized. These are parameters.</comment>
  </data>
  <data name="CannotSupplyUriAndComputername" xml:space="preserve">
    <value>Cannot supply both connection URI and computer name.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Xml_cmdletsOverObjectsXsd" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\..\..\..\src\cimSupport\cmdletization\xml\cmdlets-over-objects.xsd;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
    <comment>{Locked}</comment>
  </data>
  <data name="EnumWriter_InvalidEnumName" xml:space="preserve">
    <value>The value of the EnumName attribute does not translate to a valid C# identifier: {0}. Verify the EnumName attribute in Cmdlet Definition XML, and then try again.</value>
    <comment>{StrContains="EnumName"}</comment>
  </data>
  <data name="EnumWriter_InvalidValueName" xml:space="preserve">
    <value>The value of the Name attribute is not a valid C# identifier: {0}. Verify the Name attribute in Cmdlet Definition XML and try again.</value>
    <comment>{StrContains="Enum"} {StrContains="Value"} {StrContains="Name"}</comment>
  </data>
  <data name="CommandNameRequired" xml:space="preserve">
    <value>A command name is required.</value>
  </data>
  <data name="ComputerNameNotValid" xml:space="preserve">
    <value>The computer name {0} is not valid. If you are trying to supply a Uri, use the Uri parameter.</value>
  </data>
  <data name="ConnectivityGroup" xml:space="preserve">
    <value>Connectivity</value>
  </data>
  <data name="DependModuleImportFailed" xml:space="preserve">
    <value>Windows PowerShell Workflow cannot continue running the activity because an error occurred while importing dependent module(s) '{0}' specified for activity '{1}'.  To fix this problem, make sure that the module exists on the computer. If it is not required, remove references to the module from the activity.</value>
  </data>
  <data name="DuplicateInputDefinedInPipeline" xml:space="preserve">
    <value>Input is defined in Pipeline variable and in the first child activity. Input should be defined only at one place.</value>
  </data>
  <data name="DuplicateResultDefinedInPipeline" xml:space="preserve">
    <value>Result is defined in Pipeline variable and in the last child activity. Result should be defined at one place.</value>
  </data>
  <data name="ImportLocalizedDataWithEmptyEmptyorNullBaseDirectory" xml:space="preserve">
    <value>Cannot have an empty BaseDirectory for importing localized data. Please specify a valid BaseDirectory and run the command again.</value>
    <comment>BaseDirectory should not be localized. This is a parameter.</comment>
  </data>
  <data name="InputAndOutputGroup" xml:space="preserve">
    <value>Input and Output</value>
  </data>
  <data name="InputRequired" xml:space="preserve">
    <value>The input parameter is required.</value>
  </data>
  <data name="LocalAndRemoteNodesCannotBeTogetherForRestartComputerActivity" xml:space="preserve">
    <value>Restart-Computer activity cannot be run because both localhost and managed nodes are provided in the ComputerName parameter.  For this scenario please run Restart-Computer activity for managed nodes followed by another Restart-Computer activity for localhost.</value>
    <comment>Restart-Computer and ComputerName should not be localized. These are a command and parameter.</comment>
  </data>
  <data name="NoChildPipeline" xml:space="preserve">
    <value>Pipeline activity works with at least one child activity.</value>
  </data>
  <data name="NullArgumentExpression" xml:space="preserve">
    <value>The following argument can not be null or empty: Expression</value>
  </data>
  <data name="NullReturnedAfterExpressionEvaluation" xml:space="preserve">
    <value>The result of Windows PowerShell expression evaluation is null or nothing</value>
  </data>
  <data name="ProgressPositionMessage" xml:space="preserve">
    <value> {0} line:{1} char:{2}</value>
  </data>
  <data name="RestartComputerWithWaitNotAllowed" xml:space="preserve">
    <value>Parameter 'Wait' cannot be used for Restart-Computer activity when the localhost is being restarted.</value>
    <comment>Wait and Restart-Computer should not be localized. These are a parameter and command.</comment>
  </data>
  <data name="RunningTimeExceeded" xml:space="preserve">
    <value>The activity has exceeded the specified maximum running time of {0} seconds.</value>
  </data>
  <data name="ActivityNameConflict1" xml:space="preserve">
    <value>Cannot generate activity. The name '{0}' is reserved.</value>
  </data>
  <data name="ActivityNameNotFound1" xml:space="preserve">
    <value>Cannot generate activity. The command name '{0}' could not be found in the default runspace. Use the GenerateFromCommandInfo method to generate activities for non-default commands.</value>
    <comment>GenerateFromCommandInfo should not be localized. It is the name of a method.</comment>
  </data>
  <data name="AmbiguousCommand" xml:space="preserve">
    <value>The command name '{0}' is ambiguous and cannot be processed. To use this command, specify a module qualified name such as: 'Microsoft.PowerShell.Management\Get-Process'.</value>
    <comment>Microsoft.PowerShell.Management\Get-Process should not be localized. It is the qualified command name.</comment>
  </data>
  <data name="AssignmentNotSupported" xml:space="preserve">
    <value>This type of assignment is not supported. Only variable names (i.e.: $variable) may be used as the target of an assignment statement.</value>
  </data>
  <data name="AttributedExpressionNotSupported" xml:space="preserve">
    <value>Attributed expression (i.e.: [Parameter()]$x) should be used only when declaring parameters for the script workflow.</value>
    <comment>Parameter() should not be localized. This is syntax.</comment>
  </data>
  <data name="BeginProcessNotSupported" xml:space="preserve">
    <value>Begin, Process, and End statements are not supported in a Windows PowerShell Workflow.</value>
    <comment>Begin, Process, and End should not be localized. These are syntax.</comment>
  </data>
  <data name="BreakContinueNotSupported" xml:space="preserve">
    <value>Break and Continue statements are not supported in a Windows PowerShell Workflow. Instead, use an 'if' statement to control loop execution.</value>
    <comment>Break and Continue and 'if' should not be localized. These are syntax.</comment>
  </data>
  <data name="CannotAssignStartSleepToVariable" xml:space="preserve">
    <value>Cannot assign Start-Sleep to a variable. Start-Sleep generates no output.</value>
    <comment>Start-Sleep should not be localized. This is a command name.</comment>
  </data>
  <data name="CannotMergeErrorToOutput" xml:space="preserve">
    <value>Cannot redirect the error stream to the output stream. The target activity '{0}' does not contain the property 'MergeErrorToOutput'.</value>
    <comment>MergeErrorToOutput should not be localized. It is a property.</comment>
  </data>
  <data name="CannotProcessMoreThanOneScriptBlock" xml:space="preserve">
    <value>Cannot process more than one script block.</value>
  </data>
  <data name="CannotRedirectErrorStreamForNewObject" xml:space="preserve">
    <value>Cannot redirect error stream for the New-Object activity.</value>
    <comment>New-Object should not be localized. This is a command name.</comment>
  </data>
  <data name="CannotRedirectErrorStreamForStartSleep" xml:space="preserve">
    <value>Cannot redirect error stream for the delay activity. Please remove the stream redirection from this activity and try again.</value>
  </data>
  <data name="ActivityDoesNotContainResultProperty" xml:space="preserve">
    <value>Cannot assign the output of the '{1}' activity. It does not contain the 'Result' property. If this is a workflow that calls another workflow, implement a Result property as a [ref] parameter.</value>
    <comment>Result should not be localized. It is the name of a property.</comment>
  </data>
  <data name="CannotSpecifyBothCommandAndCommandName1" xml:space="preserve">
    <value>'Command' is mutually exclusive with 'CommandName'. Either specify  'CommandName' (optionally with 'Parameters'),  or 'Command'.</value>
    <comment>Command, CommandName and Parameters should not be localized. These are parameters.</comment>
  </data>
  <data name="CannotSpecifyResultArgument" xml:space="preserve">
    <value>Assigning values to the Result argument is not supported. To store the output of a command, assign it to a variable. For example: $output = Get-Process.</value>
    <comment>$output = Get-Process should not be localized. This is syntax and command name. Result should not be localized. It is a parameter.</comment>
  </data>
  <data name="CannotStoreResultsInUnsupportedElement" xml:space="preserve">
    <value>Cannot store the results of this type of expression into a variable. Only the results of commands, pipelines, constant expressions, foreach statements, parallel and sequence statements can be stored in variables.</value>
  </data>
  <data name="CannotStoreResultsInVariable" xml:space="preserve">
    <value>Cannot store results in the variable '{0}'. Results are already being collected in the variable '{1}'.</value>
  </data>
  <data name="CannotUseDataCollectingVariable" xml:space="preserve">
    <value>The variable with name '{0}' is defined to store results from a parallel or sequence block. Therefore, it cannot be reused inside such blocks.</value>
  </data>
  <data name="CommandActivityExcluded" xml:space="preserve">
    <value>Cannot call the '{0}' command. Other commands from this module have been packaged as workflow activities, but this command was specifically excluded. This is likely because the command requires an interactive Windows PowerShell session, or has behavior not suited for workflows. To run this command anyway, place it within an inline-script (InlineScript {{ {0} }}) where it will be invoked in isolation.</value>
    <comment>InlineScript should not be localized. This is syntax.</comment>
  </data>
  <data name="CommandNameRequired1" xml:space="preserve">
    <value>A command name is required.</value>
  </data>
  <data name="CommonParameterNotSupported" xml:space="preserve">
    <value>Could not find a parameter named '{0}' for the '{1}' command. Windows PowerShell common parameters such as WhatIf and OutVariable are not supported.</value>
    <comment>WhatIf and OutVariable should not be localized. These are parameter names.</comment>
  </data>
  <data name="ComputerNameNotValid1" xml:space="preserve">
    <value>The computer name {0} is not valid. If you are trying to supply a Uri, use the Uri parameter.</value>
  </data>
  <data name="ConditionsCannotHaveSideEffects" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, loop conditions that modify variables are not supported. To change a variable, place the modification statement in the loop body itself.</value>
  </data>
  <data name="CouldNotFindParameterName" xml:space="preserve">
    <value>Could not find a parameter named '{0}'. Supported parameters are: {1}.</value>
  </data>
  <data name="CouldNotFindParameterNameNested" xml:space="preserve">
    <value>Could not find a parameter named '{0}'. Workflow-common parameters such as PSComputerName are not supported in nested workflows that already have nested workflows.</value>
    <comment>PSComputerName should not be localized. This is a parameter.</comment>
  </data>
  <data name="CouldNotFindParameterNameShadowedActivity" xml:space="preserve">
    <value>Could not find a parameter named '{0}'. Note that this activity has the same name as a Windows PowerShell cmdlet, but different parameters. Supported parameters are: {1}.</value>
  </data>
  <data name="CouldNotLoadRequiredAssembly" xml:space="preserve">
    <value>Could not load assembly '{0}' specified in the list of required assemblies.</value>
  </data>
  <data name="AlternateInvocationNotSupported" xml:space="preserve">
    <value>Dot-sourcing (. &lt;command&gt;) and the invocation operator (&amp; &lt;command&gt;) are not supported in a Windows PowerShell Workflow. Wrap this command invocation into an inlinescript { } instead.</value>
  </data>
  <data name="DuplicateInputDefinedInPipeline1" xml:space="preserve">
    <value>Input is defined in the Pipeline activity and in the first child activity. Input should be defined in only one place.</value>
  </data>
  <data name="DuplicateResultDefinedInPipeline1" xml:space="preserve">
    <value>The result is defined in the Pipeline variable, and in the last child activity. The result should be defined in only one place.</value>
  </data>
  <data name="DynamicParametersNotSupported" xml:space="preserve">
    <value>Dynamic parameters are not supported in a Windows PowerShell Workflow.</value>
  </data>
  <data name="EnumWriter_InvalidEnumName1" xml:space="preserve">
    <value>The value of the EnumName attribute doesn't translate to a valid C# identifier: {0}.    Verify the EnumName attribute in Cmdlet Definition XML and try again.</value>
    <comment>{StrContains="EnumName"}</comment>
  </data>
  <data name="EnumWriter_InvalidValueName1" xml:space="preserve">
    <value>The value of the Name attribute is not a valid C# identifier: {0}.  Verify the Name attribute in Cmdlet Definition XML and try again.</value>
    <comment>{StrContains="Enum"} {StrContains="Value"} {StrContains="Name"}</comment>
  </data>
  <data name="EnvironmentVariableAssignmentNotSupported" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, assignment to environment variables is not supported.</value>
  </data>
  <data name="ImportLocalizedDataWithEmptyEmptyorNullBaseDirectory1" xml:space="preserve">
    <value>Cannot have an empty BaseDirectory for importing localized data. Please specify a valid BaseDirectory and run the command again.</value>
    <comment>BaseDirectory should not be localized. This is a parameter.</comment>
  </data>
  <data name="InlineScriptSyntax" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, the syntax for the InlineScript activity is "InlineScript { &lt;commands&gt; }".</value>
    <comment>InlineScript should not be localized. This is syntax.</comment>
  </data>
  <data name="InputRequired1" xml:space="preserve">
    <value>The input parameter is required.</value>
  </data>
  <data name="InvalidMemberName" xml:space="preserve">
    <value>{0} is not a valid parameter or variable name. Names must start with a letter, and contain only letters, digits, '-', and '_'.</value>
  </data>
  <data name="InvalidScopePrefixInWorkflow" xml:space="preserve">
    <value>A variable scope prefix that is not valid was detected. The only valid scope prefix in the script workflow is "$WORKFLOW:".</value>
    <comment>$WORKFLOW should not be localized. This is syntax.</comment>
  </data>
  <data name="InvokeExpressionSyntax" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, the syntax for Invoke-Expression is: "Invoke-Expression -Language XAML -Command &lt;string&gt;".</value>
    <comment>Invoke-Expression -Language XAML -Command should not be localized. This is syntax.</comment>
  </data>
  <data name="LocalAndRemoteNodesCannotBeTogetherForRestartComputerActivity1" xml:space="preserve">
    <value>The Restart-Computer activity cannot run because both localhost and remote computers are provided in the ComputerName parameter.  For this scenario, run the Restart-Computer activity for remote computers first, followed by another Restart-Computer activity for localhost.</value>
    <comment>Restart-Computer and ComputerName should not be localized. These are a command and parameter.</comment>
  </data>
  <data name="LoopLabelNotSupported" xml:space="preserve">
    <value>Loop labels are not supported in a Windows PowerShell Workflow.</value>
  </data>
  <data name="MethodInvocationNotSupported" xml:space="preserve">
    <value>Method invocation is not supported in a Windows PowerShell Workflow. To use .NET scripting, place your commands in an inline script: InlineScript { &lt;commands&gt; }.</value>
  </data>
  <data name="MustUseXamlLanguage" xml:space="preserve">
    <value>Invoke-Expression must use "-Language XAML" in a Windows PowerShell Workflow.</value>
    <comment>Invoke-Expression and -Language XAML should not be localized. These are syntax.</comment>
  </data>
  <data name="NewObjectCouldNotFindType" xml:space="preserve">
    <value>Could not find type {0}. Load the type(s) and try again.</value>
  </data>
  <data name="NewObjectSyntax" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, the syntax for New-Object is: "New-Object -TypeName &lt;TypeName&gt;".</value>
    <comment>New-Object and -TypeName &lt;TypeName&gt; should not be localized. This is syntax.</comment>
  </data>
  <data name="NoChildPipeline1" xml:space="preserve">
    <value>A pipeline activity must have at least one child activity.</value>
  </data>
  <data name="NullArgumentExpression1" xml:space="preserve">
    <value>The following argument cannot be null or empty: Expression</value>
  </data>
  <data name="NullReturnedAfterExpressionEvaluation1" xml:space="preserve">
    <value>The result of Windows PowerShell expression evaluation is null or nothing.</value>
  </data>
  <data name="OnlyOneRequiresStatement" xml:space="preserve">
    <value>You can provide only one #requires statement per script.</value>
  </data>
  <data name="OnlySimpleVariableReferencesSupportedInUnary" xml:space="preserve">
    <value>Only simple variable references (i.e.: $x) and number constants are supported in a unary expression.</value>
  </data>
  <data name="OnlySupportErrorStreamRedirection" xml:space="preserve">
    <value>Only the merging redirection from the error stream to the output stream is supported.</value>
  </data>
  <data name="OperatorRequiresVariable" xml:space="preserve">
    <value>Unary operators '++' and '--' work only on variables in the script workflow.</value>
  </data>
  <data name="ParallelSequenceScriptBlockSyntax" xml:space="preserve">
    <value>The syntax of a {0} script block is '{0} { &lt;commands&gt; }'.</value>
  </data>
  <data name="ParameterValidationNotSupportedOnNestedWorkflows" xml:space="preserve">
    <value>Advanced parameter validation is not supported on nested workflows.</value>
  </data>
  <data name="PositionalParametersNotSupported" xml:space="preserve">
    <value>Positional parameters are not supported in a Windows PowerShell Workflow. To invoke this command, use explicit parameter names with all values. For example: "Command -Parameter &lt;value&gt;".</value>
  </data>
  <data name="RestartComputerWithWaitNotAllowed1" xml:space="preserve">
    <value>Parameter 'Wait' cannot be used for Restart-Computer activity when the localhost is being restarted.</value>
    <comment>Wait and Restart-Computer should not be localized. These are a parameter and command.</comment>
  </data>
  <data name="ScriptBlockInvocationNotSupported" xml:space="preserve">
    <value>Script block invocation is not supported in a Windows PowerShell Workflow. To run a set of commands in a similar way as the script block invocation, place your commands in an inline script: InlineScript { &lt;commands&gt; }.</value>
    <comment>InlineScript should not be localized. This is syntax.</comment>
  </data>
  <data name="StartSleepSyntax" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, the syntax for Start-Sleep is: "Start-Sleep -Seconds &lt;int&gt;" or "Start-Sleep -Milliseconds &lt;int&gt;".</value>
    <comment>Start-Sleep, -Seconds and -Milliseconds should not be localized. These are a command and parameter names.</comment>
  </data>
  <data name="SubExpressionNotSupported" xml:space="preserve">
    <value>Sub expression (i.e.: $($x)) should only be used as the parameter value in a Windows PowerShell Workflow. To use .NET scripting, place your commands in an inline script: InlineScript { &lt;commands&gt; }.</value>
    <comment>InlineScript should not be localized. This is syntax.</comment>
  </data>
  <data name="SwitchCaseSensitive" xml:space="preserve">
    <value>Case-insensitive switch statements are not supported in a Windows PowerShell Workflow. Supply the -CaseSensitive flag, and ensure that case clauses are written appropriately. To write a case-insensitive case statement, first convert the input to either uppercase or lowercase, and update the case clauses to match.</value>
  </data>
  <data name="SwitchClauseMustBeOfSameType" xml:space="preserve">
    <value>Switch clauses must all be of the same type in a Windows PowerShell Workflow, or the condition expression must be strongly typed.</value>
  </data>
  <data name="SwitchFlagNotSupported" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, the switch statement supports only the 'CaseSensitive' flag.</value>
    <comment>CaseSensitive should not be localized, this is a flag.</comment>
  </data>
  <data name="SwitchOnlySupportsConstantExpression" xml:space="preserve">
    <value>Only constant expressions are supported as switch clauses in a Windows PowerShell Workflow.</value>
  </data>
  <data name="TrapNotSupported" xml:space="preserve">
    <value>Trap statements are not supported in a Windows PowerShell Workflow. Instead, use try, catch, or finally.</value>
  </data>
  <data name="TypeFromDynamicAssembly" xml:space="preserve">
    <value>Cannot create workflow. It depends on the type, '{0}', which was generated dynamically.</value>
  </data>
  <data name="VariableAlreadyDefined" xml:space="preserve">
    <value>Cannot define variable. A variable with name '{0}' has already been defined. To reference a variable from the top-level scope of this workflow, use the syntax: '$WORKFLOW:{0}'.</value>
    <comment>$WORKFLOW should not be localized. This is syntax.</comment>
  </data>
  <data name="CheckpointWorkflowSyntax" xml:space="preserve">
    <value>The Checkpoint-Workflow command accepts no parameters.</value>
    <comment>Checkpoint-Workflow should not be localized. This is a command name.</comment>
  </data>
  <data name="SuspendWorkflowSyntax" xml:space="preserve">
    <value>The Suspend-Workflow command accepts only one optional parameter, the syntax for Suspend-Workflow is: "Suspend-Workflow [-Label &lt;string&gt;]".</value>
    <comment>Suspend-Workflow should not be localized. This is a command name.</comment>
  </data>
  <data name="AmbiguousPropertiesFound" xml:space="preserve">
    <value>Ambiguous properties are found for the property name '{0}'.</value>
  </data>
  <data name="GenericParameterTypeNotFound" xml:space="preserve">
    <value>The generic parameter type '{0}' for the parameter '{1}' cannot be resolved.</value>
  </data>
  <data name="MissingValueForParameter" xml:space="preserve">
    <value>The value for the parameter '{0}' is not specified. To invoke this command, use explicit parameter names with all values. For example: "Command -Parameter &lt;value&gt;".</value>
  </data>
  <data name="AmbiguousParameter" xml:space="preserve">
    <value>The parameter cannot be processed because the parameter name '{0}' is ambiguous. Possible matches include: {1}.</value>
  </data>
  <data name="DataSectionNotSupported" xml:space="preserve">
    <value>Data sections are not supported in a Windows PowerShell Workflow.</value>
  </data>
  <data name="ReasonRequiredInThrowStatement" xml:space="preserve">
    <value>The throw statement requires a reason.</value>
  </data>
  <data name="SwitchEnumerationNotSupported" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, switch statements support only expressions that return a single element.</value>
  </data>
  <data name="ConditionsCannotInvokeActivities" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, loop conditions that invoke activities are not supported. Conditions can use only variable references, and Windows PowerShell language elements that interact with those variables.</value>
  </data>
  <data name="ThrowStatementCannotInvokeActivities" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, throw statements that invoke activities (other than New-Object) are not supported. Throw statements can use only strings, variable references, and Windows PowerShell language elements.</value>
    <comment>New-Object should not be localized. This is a command name.</comment>
  </data>
  <data name="MustSupplyVariableReferenceForInOutArgument" xml:space="preserve">
    <value>Parameter '{0}' is defined as an InOutArgument or OutArgument and can accept only variable references.</value>
    <comment>InOutArgument and OutArgument should not be localized.</comment>
  </data>
  <data name="CannotUseWorkflowPrefixInInlineScript" xml:space="preserve">
    <value>The scope prefix "$WORKFLOW:" cannot be used in an InlineScript activity. To reference a workflow variable in an InlineScript activity, use the prefix "$USING:" instead. Workflow variables cannot be modified from an InlineScript activity. To change a workflow variable, assign the output of the InlineScript activity to that variable.</value>
    <comment>$USING and $WORKFLOW and InlineScript should not be localized. These are syntax.</comment>
  </data>
  <data name="ActivityNotSupportedInPipeline" xml:space="preserve">
    <value>The '{0}' activity is not supported in a workflow pipeline.</value>
  </data>
  <data name="CommandHandledByKeyword" xml:space="preserve">
    <value>The '{0}' command is handled by the built-in '{1}' keyword. Use the built-in keyword instead.</value>
  </data>
  <data name="OnlySimpleParameterDefaultsSupported" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, parameter defaults may only be simple value types (such as integers) and strings. In addition, the type of the default value must match the type of the parameter.</value>
  </data>
  <data name="NewObjectMustBeAssigned" xml:space="preserve">
    <value>The output of the New-Object cmdlet must be assigned to a variable.</value>
    <comment>New-Object should not be localized. This is a command.</comment>
  </data>
  <data name="CommandNotFound" xml:space="preserve">
    <value>Cannot find the '{0}' command. If this command is defined as a workflow, ensure it is defined before the workflow that calls it. If it is a command intended to run directly within Windows PowerShell (or is not available on this system), place it in an InlineScript: 'InlineScript {{ {0} }}'</value>
    <comment>InlineScript should not be localized. This is syntax.</comment>
  </data>
  <data name="VariableNameReserved" xml:space="preserve">
    <value>The value of the variable '{0}' can only be changed using the Set-PSWorkflowData activity.</value>
    <comment>Set-PSWorkflowData should not be localized. This is a command name.</comment>
  </data>
  <data name="VariableNameReadOnly" xml:space="preserve">
    <value>The variable '{0}' is read-only.</value>
  </data>
  <data name="CannotLaunchFormat" xml:space="preserve">
    <value>Cannot start "{0}". Interactive console applications are not supported in a Windows PowerShell Workflow. To run the application, use the Start-Process cmdlet.</value>
  </data>
  <data name="DuplicateParametersNotAllowed" xml:space="preserve">
    <value>Cannot bind parameter because parameter '{0}' is specified more than once. To provide multiple values to parameters that can accept multiple values, use the array syntax. For example, "-parameter value1,value2,value3".</value>
  </data>
  <data name="InvalidRootWorkflowName" xml:space="preserve">
    <value>rootWorkflowName '{0}' is invalid. Make sure it exists in the context.</value>
  </data>
  <data name="RemotingHandledByPSComputerName" xml:space="preserve">
    <value>Could not find a parameter named 'ComputerName'. Remote connectivity in this command is handled by the 'PSComputerName' parameter.</value>
  </data>
  <data name="WorkflowScopeOnlyValidInParallelOrSequenceBlock" xml:space="preserve">
    <value>Cannot define variable. Scope names are only valid in a parallel or sequence block. Within a parallel or sequence block, the only valid scope name is 'workflow'.</value>
  </data>
  <data name="PropertyDoesNotSupportPowerShellLanguage" xml:space="preserve">
    <value>The '{0}' property does not support elements from the Windows PowerShell language such as parentheses and variables. To use this value, enclose it in a single-quoted string.</value>
  </data>
  <data name="InvalidCmdletBindingAttribute" xml:space="preserve">
    <value>In a Windows PowerShell Workflow, the CmdletBinding attribute only supports the following values: "DefaultParameterSetName, ConfirmImpact, HelpUri, PositionalBinding".</value>
  </data>
  <data name="FunctionRedefinitionNotAllowed" xml:space="preserve">
    <value>The function or workflow '{0}' cannot be redefined.</value>
  </data>
  <data name="SessionStateEntryNotSupported" xml:space="preserve">
    <value>The session state entry type '{0}' is not supported.</value>
  </data>
  <data name="RecursiveWorkflowNotSupported" xml:space="preserve">
    <value>A workflow cannot use recursion.</value>
  </data>
  <data name="VariableNotSupportedInWorkflow" xml:space="preserve">
    <value>The variable '{0}' cannot be used in a script workflow.</value>
  </data>
  <data name="InlineXamlNotSupported" xml:space="preserve">
    <value>Cannot create workflow. Inline XAML is not supported in this language mode.</value>
  </data>
  <data name="GenericPropertyTypeNotResolved" xml:space="preserve">
    <value>The generic type '{0}' cannot be resolved for the parameter '{1}'.</value>
  </data>
  <data name="EntirePipelineMustUseForeachSequence" xml:space="preserve">
    <value>Cannot define pipeline. Once a pipeline uses the Sequence parameter of the Foreach-Object or Where-Object cmdlets, all remaining commands must also be either the Foreach-Object or Where-Object cmdlet with the Sequence parameter.</value>
    <comment>Sequence, Foreach-Object, and Where-Object should not be localized. They are command and parameter names.</comment>
  </data>
  <data name="InvalidForeachSequenceParameter" xml:space="preserve">
    <value>Cannot call command. When used with the 'Sequence' parameter, the Foreach-Object cmdlet supports only the 'PipelineVariable', 'Begin', 'Sequence', and 'End' parameters.</value>
    <comment>Sequence, PipelineVariable, Begin, End, and Foreach-Object should not be localized. These are a parameter and command.</comment>
  </data>
  <data name="InvalidForeachSequencePipelinePosition" xml:space="preserve">
    <value>Cannot create pipeline. The Foreach-Object cmdlet with the -Sequence parameter cannot be used as the first element of a pipeline.</value>
    <comment>Foreach-Object should not be localized, or -Sequence. They are cmdlet and parameter names.</comment>
  </data>
  <data name="CannotNestIterativePipeline" xml:space="preserve">
    <value>Connot define pipeline. An iterative pipeline may not be nested within another iterative pipeline.</value>
  </data>
  <data name="InvalidWhereSequenceParameter" xml:space="preserve">
    <value>Cannot call command. When used with the 'Sequence' parameter, the Where-Object cmdlet supports only the 'PipelineVariable' and 'Sequence' parameters.</value>
    <comment>Sequence, PipelineVariable, and Where-Object should not be localized. These are a parameters and command.</comment>
  </data>
  <data name="InvalidWhereSequencePipelinePosition" xml:space="preserve">
    <value>Cannot create pipeline. The Where-Object cmdlet with the -Sequence parameter cannot be used as the first element of a pipeline.</value>
    <comment>Sequence and Where-Object should not be localized. These are a parameters and command.</comment>
  </data>
</root>
