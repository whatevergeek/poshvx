<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ScriptWriter_ModuleDescription" xml:space="preserve">
    <value>Cmdlets over '{0}' class</value>
    <comment>{0} is a placeholder for a name of a CIM class.  Example: "ROOT\cimv2\Win32_Process"</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Xml_cmdletsOverObjectsXsd" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\..\..\src\cimSupport\cmdletization\xml\cmdlets-over-objects.xsd;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
    <comment>{Locked}</comment>
  </data>
  <data name="ScriptWriter_DuplicateQueryParameterName" xml:space="preserve">
    <value>Two cmdlet parameters defined within the {0} element have the same name: {1}.  Resolve the conflict in the Cmdlet Definition XML and retry.</value>
    <comment>{StrContains="CmdletParameterMetadata"} {StrContains="PSName"}
{0} is a placeholder for a name of an XML element.  Example: &lt;GetCmdletParameters&gt;
{1} is a placeholder for a cmdlet parameter name.  Example: Name</comment>
  </data>
  <data name="ExportCimCommand_ErrorInCmdletizationXmlFile" xml:space="preserve">
    <value>Cannot process Cmdlet Definition XML for the following file: {0}. {1}</value>
    <comment>{0} is a placeholder for a file name.
{1} is an exception message copied from an XmlException or XmlSchemaException</comment>
  </data>
  <data name="ScriptWriter_DuplicateParameterSetInStaticCmdlet" xml:space="preserve">
    <value>The {0} cmdlet defines the {1} parameter set more than once.  Verify that the Cmdlet Definition XML does not have duplicate parameter set names and retry.</value>
    <comment>{StrContains="CmdletParameterSet"}
{0} is a placeholder for a cmdlet name. Example: 'Get-Win32Process'
{1} is a placeholder for a parameter set name.  Example: 'foo'</comment>
  </data>
  <data name="ScriptWriter_ObjectModelWrapperDefinesMultipleParameterSets" xml:space="preserve">
    <value>Cannot process the ObjectModelWrapper attribute. The {0} type defines multiple parameter sets. Verify that the Cmdlet Definition XML specifies a valid type in the ObjectModelWrapper attribute and retry.</value>
    <comment>{StrContains="ObjectModelWrapper"}
{0} is a placeholder for a .NET class name.  Example: System.Net.IPAddress</comment>
  </data>
  <data name="ScriptWriter_ObjectModelWrapperIsStillGeneric" xml:space="preserve">
    <value>Cannot process the ObjectModelWrapper attribute. The {0} type is an open generic type.  Verify that the Cmdlet Definition XML specifies a valid type in the ObjectModelWrapper attribute and retry.</value>
    <comment>{StrContains="ObjectModelWrapper"}
{0} is a placeholder for a .NET class name.  Example: System.Net.IPAddress</comment>
  </data>
  <data name="ScriptWriter_ObjectModelWrapperNotDerivedFromObjectModelWrapper" xml:space="preserve">
    <value>Cannot process the ObjectModelWrapper attribute. The {0} type is not derived from the following class: {1}.  Verify that the Cmdlet Definition XML specifies a valid type in the ObjectModelWrapper attribute and retry.</value>
    <comment>{StrContains="ObjectModelWrapper"}
{0} is a placeholder for a .NET class name.  Example: System.Net.IPAddress
{1} is a placeholder for a .NET class name. Example: Microsoft.PowerShell.Cmdletization.ObjectModelWrapper</comment>
  </data>
  <data name="ScriptWriter_ObjectModelWrapperUsesIgnoredParameterMetadata" xml:space="preserve">
    <value>Cannot process the ObjectModelWrapper attribute. The {0} type defines the {1} cmdlet parameter with a {2} attribute parameter that is ignored.  Verify that the Cmdlet Definition XML specifies a valid type in the ObjectModelWrapper attribute and retry.</value>
    <comment>{StrContains="ObjectModelWrapper"}
{0} is a placeholder for a .NET class name.  Example: System.Net.IPAddress
{1} is a placeholder for a cmdlet parameter name.  Example: 'ProcesId'
{2} is a placeholder for a name of a property of ParameterAttribute class. Example: ValueFromPipelineByPropertyName </comment>
  </data>
  <data name="ScriptWriter_ParameterNameConflictsWithCommonParameters" xml:space="preserve">
    <value>Cannot define the {0} parameter for the {1} cmdlet.  The parameter name is already defined by the {2} class.  Change the name of the parameter in Cmdlet Definition XML and retry.</value>
    <comment>{0} is a placeholder for a cmdlet parameter name.  Example: 'ProcessId'
{1} is a placeholder for a cmdlet name. Example: 'Get-Win32Process'
{2} is a placeholder for a .NET class name.  Example: 'Microsoft.PowerShell.Cmdletization.Cim.CimWrapper'</comment>
  </data>
  <data name="ScriptWriter_ParameterNameConflictsWithQueryParameters" xml:space="preserve">
    <value>Cannot define the {0} parameter for the {1} cmdlet. The parameter name is already defined within the {2} XML element. Change the name of the parameter in the Cmdlet Definition XML, and then try again.</value>
    <comment>{0} is a placeholder for a cmdlet parameter name.  Example: 'ProcessId'
{1} is a placeholder for a cmdlet name. Example: 'Get-Win32Process'
{2} is a placeholder for an xml element name.  Example: &lt;GetCmdletParameters&gt;</comment>
  </data>
  <data name="ScriptWriter_ConcatenationOfDeserializationExceptions" xml:space="preserve">
    <value>{0} {1}</value>
    <comment>This is a resource string, to support locales where the order of placeholders might need to be reversed.
{0} is a placeholder for a top-level exception message (i.e. "There is an error in XML document (2, 2).")
{1} is a placeholder for a secondary exception message (i.e. "")</comment>
  </data>
  <data name="EnumWriter_InvalidEnumName" xml:space="preserve">
    <value>The value of the EnumName attribute doesn't translate to a valid C# identifier: {0}. Verify the EnumName attribute in the Cmdlet Definition XML, and then try again.</value>
    <comment>{StrContains="EnumName"}</comment>
  </data>
  <data name="EnumWriter_InvalidValueName" xml:space="preserve">
    <value>The value of the Name attribute is not a valid C# identifier: {0}.  Verify the Name attribute in the Cmdlet Definition XML, and then try again.</value>
    <comment>{StrContains="Enum"} {StrContains="Value"} {StrContains="Name"}</comment>
  </data>
  <data name="ScriptWriter_InvalidEnum" xml:space="preserve">
    <value>Cannot process the &lt;Enum EnumName="{0}" ...&gt; element.  {1}</value>
    <comment>{StrContains="Enum"} {StrContains="EnumName"}</comment>
  </data>
  <data name="ImportModule_UnsupportedCmdletAdapter" xml:space="preserve">
    <value>The remote computer returned a CDXML file that is not valid. The following cmdlet adapter is not supported for importing a CDXML module from a remote computer: {0}</value>
    <comment>{0} is a placeholder for a fully qualified type name</comment>
  </data>
</root>
