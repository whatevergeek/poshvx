<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="VariableBreakpointString" xml:space="preserve">
    <value>Variable breakpoint on '${0}' ({1} access)</value>
  </data>
  <data name="VariableScriptBreakpointString" xml:space="preserve">
    <value>Variable breakpoint on '{0}:${1}' ({2} access)</value>
  </data>
  <data name="LineBreakpointString" xml:space="preserve">
    <value>Line breakpoint on '{0}:{1}'</value>
  </data>
  <data name="StatementBreakpointString" xml:space="preserve">
    <value>Line breakpoint on '{0}:{1}, {2}'</value>
  </data>
  <data name="CommandBreakpointString" xml:space="preserve">
    <value>Command breakpoint on '{0}'</value>
  </data>
  <data name="CommandScriptBreakpointString" xml:space="preserve">
    <value>Command breakpoint on '{0}:{1}'</value>
  </data>
  <data name="WarningBreakpointWillNotBeHit" xml:space="preserve">
    <value>Breakpoint {0} will not be hit</value>
  </data>
  <data name="StepHelp" xml:space="preserve">
    <value> {0}, {1,-16} Single step (step into functions, scripts, etc.)</value>
  </data>
  <data name="StepOverHelp" xml:space="preserve">
    <value> {0}, {1,-16} Step to next statement (step over functions, scripts, etc.)</value>
  </data>
  <data name="StepOutHelp" xml:space="preserve">
    <value> {0}, {1,-16} Step out of the current function, script, etc.</value>
  </data>
  <data name="ContinueHelp" xml:space="preserve">
    <value> {0}, {1,-16} Continue operation</value>
  </data>
  <data name="StopHelp" xml:space="preserve">
    <value> {0}, {1,-16} Stop operation and exit the debugger</value>
  </data>
  <data name="GetStackTraceHelp" xml:space="preserve">
    <value> {0}, Get-PSCallStack  Display call stack</value>
  </data>
  <data name="ListHelp" xml:space="preserve">
    <value> {0}, {1,-16} List source code for the current script.  </value>
  </data>
  <data name="AdditionalListHelp1" xml:space="preserve">
    <value>                     Use "list" to start from the current line, "list &lt;m&gt;"  </value>
  </data>
  <data name="AdditionalListHelp2" xml:space="preserve">
    <value>                     to start from line &lt;m&gt;, and "list &lt;m&gt; &lt;n&gt;" to list &lt;n&gt; </value>
  </data>
  <data name="AdditionalListHelp3" xml:space="preserve">
    <value>                     lines starting from line &lt;m&gt;</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value> &lt;enter&gt;             Repeat last command if it was {0}, {1} or {2}</value>
  </data>
  <data name="HelpCommandHelp" xml:space="preserve">
    <value> {0}, {1,-16} displays this help message.</value>
  </data>
  <data name="PromptHelp" xml:space="preserve">
    <value>For instructions about how to customize your debugger prompt, type "help about_prompt".</value>
  </data>
  <data name="SessionDoesNotSupportDebugger" xml:space="preserve">
    <value>
The current session does not support debugging; operation will continue.

</value>
  </data>
  <data name="LocationFormat" xml:space="preserve">
    <value>{0}: line {1}</value>
  </data>
  <data name="NoSourceCode" xml:space="preserve">
    <value>There is no source code available.</value>
  </data>
  <data name="BadStartFormat" xml:space="preserve">
    <value>The starting line must be a positive integer no greater than {0}</value>
  </data>
  <data name="BadCountFormat" xml:space="preserve">
    <value>The line count must be a positive integer.</value>
  </data>
  <data name="NoFile" xml:space="preserve">
    <value>&lt;No file&gt;</value>
  </data>
  <data name="StackTraceFormat" xml:space="preserve">
    <value>at {0}, {1}: line {2}</value>
  </data>
  <data name="CannotProcessDebuggerCommandNotStopped" xml:space="preserve">
    <value>The debugger cannot process commands unless it is in the Stopped state.</value>
  </data>
  <data name="CannotSetDebuggerAction" xml:space="preserve">
    <value>SetDebugAction is not implemented for the local script debugger.</value>
  </data>
  <data name="CannotSetRemoteDebuggerAction" xml:space="preserve">
    <value>The debugger cannot set a resume action because the debugger in the remote session is not in a Stopped state.</value>
  </data>
  <data name="WorkflowDebuggingNotSupported" xml:space="preserve">
    <value>Workflow debugging is available, but is not supported by the current host. Use the Windows PowerShell console or Windows PowerShell ISE to debug workflows.</value>
  </data>
  <data name="CannotStartJobDebuggingDebuggerBusy" xml:space="preserve">
    <value>The job cannot be debugged because the debugger is currently busy.</value>
  </data>
  <data name="NoDebuggableJobsFound" xml:space="preserve">
    <value>The provided job and all child jobs were examined but no jobs were found that could be debugged.  In order to debug a job or child job the job must support debugging and also be in a running state.</value>
  </data>
  <data name="CannotEnableDebuggerSteppingInvalidMode" xml:space="preserve">
    <value>The debugger cannot be enabled for step mode because the debugger is turned off with debug mode set to None.</value>
  </data>
  <data name="RunspaceDebuggingDebuggerBusy" xml:space="preserve">
    <value>The Runspace cannot be debugged because the host debugger is currently busy.</value>
  </data>
  <data name="RunspaceDebuggingDebuggerIsOff" xml:space="preserve">
    <value>Cannot debug Runspace. The Runspace debugger is currently turned off (DebugMode is 'None').</value>
  </data>
  <data name="RunspaceDebuggingInvalidRunspaceState" xml:space="preserve">
    <value>Cannot debug a Runspace that is not in the Opened state. This Runspace state is {0}.</value>
  </data>
  <data name="RunspaceDebuggingNoRunspaceDebugger" xml:space="preserve">
    <value>Cannot debug Runspace. The Runspace {0} has no associated debugger.</value>
  </data>
  <data name="RemoteServerDebuggerAlreadyPushed" xml:space="preserve">
    <value>The debugger is already overridden.</value>
  </data>
  <data name="RemoteServerDebuggerCannotPushSelf" xml:space="preserve">
    <value>Cannot push a debugger object onto itself.</value>
  </data>
  <data name="NestedRunspaceDebuggerPromptProcessName" xml:space="preserve">
    <value>Process</value>
  </data>
  <data name="DetachHelp" xml:space="preserve">
    <value> {0}, {1,-16} Continue operation and detach the debugger.</value>
  </data>
  <data name="InvalidDetachCommand" xml:space="preserve">
    <value>The debugger detach command is not applicable.  The detach command only applies when debugging jobs and runspaces with the Debug-Job or Debug-Runspace cmdlets.</value>
  </data>
</root>